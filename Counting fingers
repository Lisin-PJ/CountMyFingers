import cv2
import numpy as np
import os
from picamera2 import Picamera2

# Initialize Picamera2
picam2 = Picamera2()
preview_config = picam2.create_preview_configuration(main={"format": "XRGB8888", "size": (640, 480)})
picam2.configure(preview_config)
picam2.start()

# Function to speak text
def speak(text):
    os.system(f'espeak "{text}"')

# Function to count fingers using convexity defects
def count_fingers(contour):
    hull = cv2.convexHull(contour, returnPoints=False)
    if hull is None or len(hull) < 3:
        return 0

    defects = cv2.convexityDefects(contour, hull)
    if defects is None:
        return 0

    finger_count = 0
    for i in range(defects.shape[0]):
        s, e, f, d = defects[i, 0]
        start = tuple(contour[s][0])
        end = tuple(contour[e][0])
        far = tuple(contour[f][0])

        # Cosine rule to calculate angle
        a = np.linalg.norm(np.array(end)-np.array(start))
        b = np.linalg.norm(np.array(far)-np.array(start))
        c = np.linalg.norm(np.array(end)-np.array(far))
        angle = np.arccos((b**2 + c**2 - a**2)/(2*b*c))

        if angle <= np.pi/2:  # <= 90 degrees, counts as a finger
            finger_count += 1
    return finger_count

print("Press 'q' to quit")

while True:
    frame = picam2.capture_array()
    frame = cv2.flip(frame, 1)  # Mirror
    roi = frame[50:400, 100:500]
    gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (7,7), 0)
    _, thresh = cv2.threshold(blur, 70, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    gesture_text = "No Hand"

    if contours:
        cnt = max(contours, key=cv2.contourArea)
        if cv2.contourArea(cnt) > 1000:  # Ignore small contours
            finger_count = count_fingers(cnt)

            # Map defects to finger numbers
            if finger_count == 0:
                gesture_text = "Closed Hand"
            elif finger_count == 1:
                gesture_text = "1 Finger"
            elif finger_count == 2:
                gesture_text = "2 Fingers"
            elif finger_count == 3:
                gesture_text = "3 Fingers"
            elif finger_count == 4:
                gesture_text = "4 Fingers"
            else:
                gesture_text = "5 Fingers"

            cv2.drawContours(roi, [cnt], -1, (255,0,0), 2)
            cv2.drawContours(roi, [cv2.convexHull(cnt)], -1, (0,255,0), 2)
            speak(gesture_text)

    cv2.putText(frame, gesture_text, (50,50), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0,255,0), 3)
    cv2.rectangle(frame, (100,50), (500,400), (255,0,0), 2)
    cv2.imshow("Finger Counting", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

picam2.close()
cv2.destroyAllWindows()
